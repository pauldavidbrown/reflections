1.What happens when you initialize a repository? Why do you need to do it?
It sets up some hidden files and the .git directory which stores meta data about the files in the parent directory

2. How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area allows you choose what files should be committed, it also allows you to use git reset - to remove files from staging

3. Useful to kmow, gif diff - working directory -> stage, git diff --staged, staging vs last commit

4. How can you use the staging area to make sure you have one commit per logical change?
by only adding what makes sense in that circumstance

5. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are useful for testing out new features whilst enabling core code to continue to be developed.  git branch !branchname

6. Remote branches are branched created by other users in a repoository

7. Head just means current commit

8. How do the diagrams help you visualize the branch structure?
Its easier to work out orphaned commits that you cannot get back to

9. Git show allows you to see the difference between a commit and its parent without knowing its parents ID.   This is relevant when you have merged several branches together (so called interleaving).

10. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
-Need to work om the ancestor control-

11. What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Auto merging cannot account for every eventuality as git itself has no idea whether a chunk of code is required for a func†ion to operate correctly






